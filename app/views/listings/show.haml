- content_for :javascript do
  initialize_listing_view('#{I18n.locale}');

- content_for :extra_javascript do
  :javascript
    window.ST.listing();
  = javascript_include_tag "https://maps.google.com/maps/api/js?sensor=true"
  
- content_for :title, raw(@listing.title)
- content_for :meta_author, @listing.author.name(@current_community)
- content_for :meta_description, StringUtils.first_words(@listing.description, 15)
- content_for :meta_image, @listing.listing_images.first.image.url(:medium) if !@listing.listing_images.empty?
- dimensions = @listing.listing_images.first.get_dimensions_for_style(:medium) if !@listing.listing_images.empty?
- content_for :meta_image_width, dimensions[:width].to_s if !@listing.listing_images.empty?
- content_for :meta_image_height, dimensions[:height].to_s if !@listing.listing_images.empty?
- content_for :keywords, StringUtils.keywords(@listing.title)

- content_for :title_header do
  %h1
    %span#listing-title.listing-title= @listing.title

%script{type: "text/template", class: "template", id: "image-frame-template"}
  .listing-image-frame
    #listing-image-link.listing-image-frame-content
      .listing-image-vertical-centering{:class => "${aspectRatioClass}" }
        %img{:src => "${url}", :alt => @listing.title, :class => "listing-image ${aspectRatioClass}"}

%script{type: "text/template", class: "template", id: "image-thumbnail-template"}
  .listing-image-thumbnail-container
    %img.listing-image-thumbnail{src: "${url}"}
    .fade

.row
  .col-8
    .row
      .col-12
        - with_image_frame(@listing) do |reason, listing_images|
          - if reason == :images_ok
            .listing-image-carousel
              #listing-image-frame

              - if @prev_image_id && @next_image_id
                = link_to params.merge(image: @prev_image_id), class: "listing-image-navi listing-image-navi-left", id: "listing-image-navi-left" do
                  .listing-image-navi-arrow-container
                    .listing-image-arrow-icon-container.left
                      = icon_tag("directleft", ["navigate-icon-fix", "listing-image-navi-arrow"])
                = link_to params.merge(image: @next_image_id), class: "listing-image-navi listing-image-navi-right", id: "listing-image-navi-right" do
                  .listing-image-navi-arrow-container
                    .listing-image-arrow-icon-container.right
                      = icon_tag("directright", ["navigate-icon-fix", "listing-image-navi-arrow"])
            #thumbnail-stripe.listing-image-thumbnail-stripe

            - content_for :extra_javascript do
              :javascript
                var listingImages = #{listing_images.map { |image| ListingImageJSAdapter.new(image) }.to_json }
                var currentImage = #{params[:image].present? ? params[:image].to_i : listing_images.first.id};
                ST.listingImages(listingImages, currentImage);
          - else
            .listing-image-text-container
              .listing-image-frame
                .listing-image-frame-content
                  .listing-image-vertical-centering
                    .listing-no-image
                      - if reason == :images_processing
                        = t("listings.show.processing_uploaded_image")
                      - else
                        = t(".no_description")

    .row
      .col-12
        - if @listing.description && !@listing.description.blank?
          - text_with_line_breaks do
            = @listing.description

    - @listing.custom_field_values.each do |custom_field_value|
      .row
        .col-12
          - custom_field_value.with_type do |question_type|
            = render :partial => "listings/custom_field_partials/#{question_type}", :locals => { :custom_field_value => custom_field_value }

    - if @current_community.show_listing_publishing_date?
      .row
        .col-12
          .icon-with-text-container
            = icon_tag("calendar", ["icon-part"])
            .text-part
              %b
                = t(".listing_created_at")
                = l @listing.created_at, :format => :short_date

    - if !@current_community.private?
      .row
        .col-12
          .listing-social
            .listing-fb-like-button
              = facebook_like(current_user?(@listing.author))
            .listing-tweet-button
              = link_to("", "https://twitter.com/share", :class => "twitter-share-button", "data" => {count: "horizontal", via: (@current_community.twitter_handle || "Sharetribe"), text: @listing.title })
              - content_for :extra_javascript do
                :javascript
                  !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");

    - unless (@listing.closed? && !current_user?(@listing.author)) || !@current_community.listing_comments_in_use
      .view-item
        #comments.discussion.overflow-allowed
          %h2
            = icon_tag("chat_bubble", ["icon-with_text"])
            .text-with-icon
              = t(".comments")
              %span#comment_count= "(#{@listing.comments_count})"
          #follow-links.follow-links
            = render :partial => "follow_links"
          #comment-list
            = render :partial => "comment", :collection => @listing.comments
          #comment-form
            = render :partial => "comment_form"

  %aside.col-4
    - if @listing.price
      .row
        .col-12
          .listing-price
            %span.listing-price-amount
              = humanized_money_with_symbol(@listing.price).upcase
            - with_quantity_and_vat_text(@current_community, @listing) do |text|
              %span.listing-price-quantity
                = text

    .row-with-divider
      .col-12
        #listing-message-links
          = render :partial => "listing_actions", locals: { form_path: form_path, payment_gateway: payment_gateway, delivery_opts: delivery_opts, process: process, listing_unit_type: listing_unit_type, country_code: country_code }
          = select( :country, :id, @listing.shippings.collect {|u| [u.country, u.country]}, { :multiple => false })
          
          
    .row-with-divider
      .col-12
        .listing-author
          .listing-author-avatar
            = medium_avatar_thumb(@listing.author, {:class => "listing-author-avatar-image"})
          .listing-author-details
            .listing-author-name
              = link_to @listing.author.name(@current_community), @listing.author, :id => "listing-author-link", :class => "listing-author-name-link", :title => "#{@listing.author.name(@current_community)}"
            - if @listing.author != @current_user
              .listing-author-contact
                %a#listing-contact{href: contact_to_listing_path(:listing_id => @listing.id.to_s), :class => "listing-author-contact-button"}
                  .content
                    = t(".contact")

    - if @current_community.testimonials_in_use && @listing.author.received_testimonials.size > 0
      .row-with-divider.listing-author-activity
        .col-12
          %i.listing-author-activity-icon{:class => icon_class("testimonial")}
          .listing-author-activity-item
            .listing-author-activity-value
              - if @listing.author.received_testimonials.size > 0
                = @listing.author.feedback_positive_percentage.to_s + "%"
                = t("people.show.positive")
                = "(#{@listing.author.received_positive_testimonials.size}/#{@listing.author.received_testimonials.size})"
              - else
                = t(".no_reviews")
            .listing-author-activity-description
              = t(".feedback")

    - if @listing.origin_loc && @listing.origin_loc.address != ""
      .row
        .col-12
          #googlemap
            = render :partial => "googlemap", :locals => { :listing => @listing}
            = render :partial => "origin", :locals => { :origin_loc => @listing.origin_loc }
:javascript

   var ready = (function(){    

    var readyList,
        DOMContentLoaded,
        class2type = {};
        class2type["[object Boolean]"] = "boolean";
        class2type["[object Number]"] = "number";
        class2type["[object String]"] = "string";
        class2type["[object Function]"] = "function";
        class2type["[object Array]"] = "array";
        class2type["[object Date]"] = "date";
        class2type["[object RegExp]"] = "regexp";
        class2type["[object Object]"] = "object";

    var ReadyObj = {
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Hold (or release) the ready event
        holdReady: function( hold ) {
            if ( hold ) {
                ReadyObj.readyWait++;
            } else {
                ReadyObj.ready( true );
            }
        },
        // Handle when the DOM is ready
        ready: function( wait ) {
            // Either a released hold or an DOMready/load event and not yet ready
            if ( (wait === true && !--ReadyObj.readyWait) || (wait !== true && !ReadyObj.isReady) ) {
                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
                if ( !document.body ) {
                    return setTimeout( ReadyObj.ready, 1 );
                }

                // Remember that the DOM is ready
                ReadyObj.isReady = true;
                // If a normal DOM Ready event fired, decrement, and wait if need be
                if ( wait !== true && --ReadyObj.readyWait > 0 ) {
                    return;
                }
                // If there are functions bound, to execute
                readyList.resolveWith( document, [ ReadyObj ] );

                // Trigger any bound ready events
                //if ( ReadyObj.fn.trigger ) {
                //  ReadyObj( document ).trigger( "ready" ).unbind( "ready" );
                //}
            }
        },
        bindReady: function() {
            if ( readyList ) {
                return;
            }
            readyList = ReadyObj._Deferred();

            // Catch cases where $(document).ready() is called after the
            // browser event has already occurred.
            if ( document.readyState === "complete" ) {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                return setTimeout( ReadyObj.ready, 1 );
            }

            // Mozilla, Opera and webkit nightlies currently support this event
            if ( document.addEventListener ) {
                // Use the handy event callback
                document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
                // A fallback to window.onload, that will always work
                window.addEventListener( "load", ReadyObj.ready, false );

            // If IE event model is used
            } else if ( document.attachEvent ) {
                // ensure firing before onload,
                // maybe late but safe also for iframes
                document.attachEvent( "onreadystatechange", DOMContentLoaded );

                // A fallback to window.onload, that will always work
                window.attachEvent( "onload", ReadyObj.ready );

                // If IE and not a frame
                // continually check to see if the document is ready
                var toplevel = false;

                try {
                    toplevel = window.frameElement == null;
                } catch(e) {}

                if ( document.documentElement.doScroll && toplevel ) {
                    doScrollCheck();
                }
            }
        },
        _Deferred: function() {
            var // callbacks list
                callbacks = [],
                // stored [ context , args ]
                fired,
                // to avoid firing when already doing so
                firing,
                // flag to know if the deferred has been cancelled
                cancelled,
                // the deferred itself
                deferred  = {

                    // done( f1, f2, ...)
                    done: function() {
                        if ( !cancelled ) {
                            var args = arguments,
                                i,
                                length,
                                elem,
                                type,
                                _fired;
                            if ( fired ) {
                                _fired = fired;
                                fired = 0;
                            }
                            for ( i = 0, length = args.length; i < length; i++ ) {
                                elem = args[ i ];
                                type = ReadyObj.type( elem );
                                if ( type === "array" ) {
                                    deferred.done.apply( deferred, elem );
                                } else if ( type === "function" ) {
                                    callbacks.push( elem );
                                }
                            }
                            if ( _fired ) {
                                deferred.resolveWith( _fired[ 0 ], _fired[ 1 ] );
                            }
                        }
                        return this;
                    },

                    // resolve with given context and args
                    resolveWith: function( context, args ) {
                        if ( !cancelled && !fired && !firing ) {
                            // make sure args are available (#8421)
                            args = args || [];
                            firing = 1;
                            try {
                                while( callbacks[ 0 ] ) {
                                    callbacks.shift().apply( context, args );//shifts a callback, and applies it to document
                                }
                            }
                            finally {
                                fired = [ context, args ];
                                firing = 0;
                            }
                        }
                        return this;
                    },

                    // resolve with this as context and given arguments
                    resolve: function() {
                        deferred.resolveWith( this, arguments );
                        return this;
                    },

                    // Has this deferred been resolved?
                    isResolved: function() {
                        return !!( firing || fired );
                    },

                    // Cancel
                    cancel: function() {
                        cancelled = 1;
                        callbacks = [];
                        return this;
                    }
                };

            return deferred;
        },
        type: function( obj ) {
            return obj == null ?
                String( obj ) :
                class2type[ Object.prototype.toString.call(obj) ] || "object";
        }
    }
    // The DOM ready check for Internet Explorer
    function doScrollCheck() {
        if ( ReadyObj.isReady ) {
            return;
        }

        try {
            // If IE is used, use the trick by Diego Perini
            // http://javascript.nwbox.com/IEContentLoaded/
            document.documentElement.doScroll("left");
        } catch(e) {
            setTimeout( doScrollCheck, 1 );
            return;
        }

        // and execute any waiting functions
        ReadyObj.ready();
    }
    // Cleanup functions for the document ready method
    if ( document.addEventListener ) {
        DOMContentLoaded = function() {
            document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
            ReadyObj.ready();
        };

    } else if ( document.attachEvent ) {
        DOMContentLoaded = function() {
            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if ( document.readyState === "complete" ) {
                document.detachEvent( "onreadystatechange", DOMContentLoaded );
                ReadyObj.ready();
            }
        };
    }
    function ready( fn ) {
        // Attach the listeners
        ReadyObj.bindReady();

        var type = ReadyObj.type( fn );

        // Add the callback
        readyList.done( fn );//readyList is result of _Deferred()
    }
    return ready;
  })();

  ready(function(){
      $("#country_id").change(function(){
        shipping_rate_select($(this).val());
      });
  });
  
  

  function shipping_rate_select(country) {
    jQuery.ajax({
        url : 'shipping_rate',
        type : 'GET',
        data : {country: country},
        success : function(s)
         {
            $('#shipping_price').html('Shipping Price($+)' +s.price);
         }
      });
  }

